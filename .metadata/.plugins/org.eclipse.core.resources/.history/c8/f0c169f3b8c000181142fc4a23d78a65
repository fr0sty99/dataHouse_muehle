package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseListener;

import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;

import constants.AppColors;
import model.Node;
import model.NodeSet;
import model.Player;

// This class is responsible for representing the board aka playground.
@SuppressWarnings("serial")
public class GameView extends JSplitPane {
	public int scale = 70;
	public int offSetY = 40;
	public JPanel gridPanel;
	public JPanel playerPanel;
	public int dividerLocation = 0;

	public GameView(int viewWidth, int viewHeight) {
		// board
		Dimension boardPanelDimension = new Dimension(viewWidth, viewHeight);
		setBackground(AppColors.panelDefaultColor);
		setPreferredSize(boardPanelDimension);
		setMaximumSize(boardPanelDimension);

		setDividerSize(0);
		dividerLocation = viewHeight - 50;
		setDividerLocation(dividerLocation);

		setOrientation(JSplitPane.VERTICAL_SPLIT);

		gridPanel = new JPanel();
		playerPanel = new JPanel();
		
		Dimension playerPanelSize = new Dimension(viewWidth, 50);
		playerPanel.setMaximumSize(playerPanelSize);

		setTopComponent(gridPanel);
		setBottomComponent(playerPanel);
		// players

		/*
		 * public JLabel playerOneLabel; public JLabel playerTwoLabel;
		 * 
		 * // width should be windowd width and height should be like 120 public
		 * PlayerView(int viewWidth, int viewHeight) { // add playerPanel, which
		 * is responsible for showing the playernames and // pieces to set, in
		 * the specific player color. setBackground(Color.GREEN); Dimension
		 * playerPanelDimension = new Dimension(viewWidth, viewHeight);
		 * setPreferredSize(playerPanelDimension);
		 * setMaximumSize(playerPanelDimension);
		 * 
		 * setBackground(AppColors.panelDefaultColor);
		 * 
		 * // split our splitPane setDividerSize(0);
		 * setDividerLocation(viewHeight / 2); }
		 * 
		 * public void setTopLabel(String text) { playerOneLabel.setText(text);
		 * }
		 * 
		 * public void setBottomLabel(String text) {
		 * playerTwoLabel.setText(text); }
		 * 
		 * public void drawCoins(int numCoins, Owner owner) {
		 * 
		 * 
		 * }
		 * 
		 * public void setPlayerLabels( { // todo: set player labels dynamically
		 * 
		 * create the labels for our component
		 * 
		 * playerOneLabel = new JLabel("Player 1");
		 * playerOneLabel.setForeground(AppColors.playerOneColor);
		 * 
		 * playerTwoLabel = new JLabel("Player 2");
		 * playerTwoLabel.setForeground(AppColors.playerTwoColor);
		 * 
		 * // set orientation and components of our splitPane
		 * setOrientation(JSplitPane.VERTICAL_SPLIT);
		 * setTopComponent(playerOneLabel); setBottomComponent(playerTwoLabel);
		 * }
		 */

		restoreDefaults(this);
	}

	public void restoreDefaults(JSplitPane pane) {
		
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				pane.setDividerLocation(dividerLocation);
			}
		});
	}

	public void drawPiecesOnPlayerPanel(Player[] players) {
		// draw pieces
		Graphics2D g = (Graphics2D) playerPanel.getGraphics();

		int offSetX = 50;
		int x = 0, y = 0;
		int width = 10, height = 10;

		for (int i = 0; i < players[0].getPiecesToSet(); i++) {
			offSetY = 470;
			g.setColor(Color.WHITE);

			g.fillOval(x + offSetX, y + offSetY, width, height);
			x += 10;
		}

		x = 0; // reset coords

		for (int i = 0; i < players[1].getPiecesToSet(); i++) {
			offSetY = 500;

			g.setColor(Color.BLACK);

			g.fillOval(x + offSetX, y + offSetY, width, height);
			x += 10;
		}
	}

	public void setPlayerOneLabel(String text) {
		// TODO: implement
	}

	public void setPlayerTwoLabel(String text) {
		// TODO: implement
	}

	public void addMyMouseListener(MouseListener mouseListener) {
		this.addMouseListener(mouseListener);
	}

	public void drawGridWithPieces(NodeSet[] sets) {
		Graphics2D g = (Graphics2D) gridPanel.getGraphics();
		// draw grid
		for (NodeSet nodeSet : sets) {

			// attention: if "sets"-Array is not filled correctly by the
			// createNodeSets method in GameController, we create a nullPointer
			Node startNode = nodeSet.getFirstNode();
			Node destinationNode = nodeSet.getThirdNode();

			g.setStroke(new BasicStroke(10));

			// draw a thick line from every first to every last Node of every
			// NodeSet
			g.drawLine(startNode.getX() * scale + offSetY, startNode.getY() * scale + offSetY,
					destinationNode.getX() * scale + offSetY, destinationNode.getY() * scale + offSetY);
		}

		// draw pieces on grid

	}

}
