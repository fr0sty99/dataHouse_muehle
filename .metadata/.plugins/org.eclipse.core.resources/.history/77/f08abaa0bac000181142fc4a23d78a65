package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseListener;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;

import constants.AppColors;
import model.Node;
import model.NodeSet;
import model.Player;

// This class is responsible for representing the board aka playground.
@SuppressWarnings("serial")
public class GameView extends JSplitPane {
	public int scale = 70;
	public int offSetY = 40;
	public JPanel gridPanel;
	public JSplitPane playerPanel;
	public int dividerLocation = 0;
	public JLabel playerOneLabel;
	public JLabel playerTwoLabel;

	public GameView(int gridViewWidth, int gridViewHeight) {
		// board
		Dimension boardPanelDimension = new Dimension(gridViewWidth, gridViewHeight);
		setBackground(AppColors.panelDefaultColor);
		setPreferredSize(boardPanelDimension);
		setMaximumSize(boardPanelDimension);

		setDividerSize(0);
		dividerLocation = gridViewHeight - 50;
		setDividerLocation(gridViewHeight);

		setOrientation(JSplitPane.VERTICAL_SPLIT);

		gridPanel = new JPanel();
		playerPanel = new JSplitPane();
		playerPanel.setDividerSize(0);
		playerPanel.setOrientation(JSplitPane.VERTICAL_SPLIT);
		playerPanel.setDividerLocation(playerPanel.getWidth()/2);
		playerPanel.setTopComponent(playerOneLabel);
		playerPanel.setBottomComponent(playerTwoLabel);
		
		Dimension minimumSize = new Dimension(0, 0);
		gridPanel.setMinimumSize(minimumSize);
		playerPanel.setMinimumSize(minimumSize);

		setTopComponent(gridPanel);
		setBottomComponent(playerPanel);

	}

	public void drawPiecesOnPlayerPanel(Player[] players) {
		// draw pieces
		Graphics2D topGraphics = (Graphics2D) playerPanel.getTopComponent().getGraphics();
		Graphics2D bottomGraphics = (Graphics2D) playerPanel.getBottomComponent().getGraphics();

		int offSetX = 50;
		int x = 0, y = 0;
		int width = 10, height = 10;

		for (int i = 0; i < players[0].getPiecesToSet(); i++) {
			offSetY = 0;
			topGraphics.setColor(Color.WHITE);

			topGraphics.fillOval(x + offSetX, y + offSetY, width, height);
			x += 10;
		}

		x = 0; // reset coords

		for (int i = 0; i < players[1].getPiecesToSet(); i++) {
			offSetY = 0;

			bottomGraphics.setColor(Color.BLACK);

			bottomGraphics.fillOval(x + offSetX, y + offSetY, width, height);
			x += 10;
		}
	}

	public void setPlayerOneLabel(String text) {
		// TODO: implement
	}

	public void setPlayerTwoLabel(String text) {
		// TODO: implement
	}

	public void addMyMouseListener(MouseListener mouseListener) {
		this.addMouseListener(mouseListener);
	}

	public void drawGridWithPieces(NodeSet[] sets) {
		Graphics2D g = (Graphics2D) gridPanel.getGraphics();
		// draw grid
		for (NodeSet nodeSet : sets) {

			// attention: if "sets"-Array is not filled correctly by the
			// createNodeSets method in GameController, we create a nullPointer
			Node startNode = nodeSet.getFirstNode();
			Node destinationNode = nodeSet.getThirdNode();

			g.setStroke(new BasicStroke(10));

			// draw a thick line from every first to every last Node of every
			// NodeSet
			g.drawLine(startNode.getX() * scale + offSetY, startNode.getY() * scale + offSetY,
					destinationNode.getX() * scale + offSetY, destinationNode.getY() * scale + offSetY);
		}

		// draw pieces on grid

	}

}
